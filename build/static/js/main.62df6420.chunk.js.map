{"version":3,"sources":["TodoList.jsx","App.js","serviceWorker.js","index.js"],"names":["TodoList","state","data","className","this","length","map","key","_id","todo","onClick","props","handleEdit","handleDel","nextProps","prevState","temp","reverse","React","Component","TodoSwal","withReactContent","Swal","App","value","tododata","handleChange","e","setState","target","handleSubmit","preventDefault","body","trim","axios","post","then","get","res","mixin","toast","position","showConfirmButton","timer","fire","type","title","id","text","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","result","delete","input","inputAutoTrim","inputPlaceholder","allowEnterKey","put","Fragment","onChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.62df6420.chunk.js","sourcesContent":["import React from 'react'\n\nclass TodoList extends React.Component{\n\n    state = {\n        data : [],\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        const temp = [...nextProps.data].reverse()\n        if(temp.length >= 0){\n            return {\n                data: temp,\n            }\n        }else{\n            return prevState\n        }\n        \n       }\n\n\n    render(){\n        return( \n            <div className=\"row justify-content-center mt-3\">\n                <div className=\"col-md-8 col-sm-12\">\n                    <ul className=\"list-group\">\n                        {this.state.data.length > 0 ? this.state.data.map((data)=>{\n                            return(\n                                <li className=\"list-group-item d-flex justify-content-between\" key={data._id}>\n                                    <p className=\"lead\">{data.todo}</p> \n                                    <div>\n                                        <button className=\"btn btn-primary m-2 btn-sm\" onClick={()=>this.props.handleEdit(data._id , data.todo)}>Edit</button>\n                                        <button onClick={()=>this.props.handleDel(data._id)} className=\"btn btn-danger btn-sm\">Delete</button>\n                                    </div>\n                                </li>\n                            )\n                        }):null}\n                    </ul>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default TodoList;","import React from 'react';\nimport axios from 'axios'\nimport TodoList from './TodoList'\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\n\nconst TodoSwal = withReactContent(Swal)\n\n\nclass App extends React.Component {\n  \n  state = {\n    value : '',\n    tododata : []\n  }\n\n  componentDidMount(){\n    axios.get(`/get_todo`).then((res)=>{\n    this.setState({\n      tododata : res.data\n    })\n  })\n}\n\n\n  handleChange = (e) =>{\n    this.setState({\n      value : e.target.value\n    })\n  }\n\n  handleSubmit = (e) =>{\n    e.preventDefault()\n\n    const body = {\n      todo : this.state.value.trim()\n    }\n    \n    axios.post(`/add_todo`, body).then(()=>{\n      axios.get(`/get_todo`).then((res)=>{\n        this.setState({\n          value : '',\n          tododata : res.data\n        })\n      })\n    }).then(()=>{\n      const Toast = Swal.mixin({\n        toast: true,\n        position: 'top-end',\n        showConfirmButton: false,\n        timer: 3000\n      })\n      \n      Toast.fire({\n        type: 'success',\n        title: 'Todo Added Successfully'\n      })\n    })\n  }\n\n  handleDel = (id) =>{\n\n    TodoSwal.fire({\n      title: 'Are you sure?',\n      text: \"You won't be able to revert this!\",\n      type: 'warning',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Yes, delete it!'\n    }).then((result) => {\n      if (result.value) {\n        axios.delete(`/delete_todo/${id}`).then(()=>{\n          axios.get(`/get_todo`).then((res)=>{\n              this.setState({\n                tododata : res.data\n              })\n          })\n      }).then(()=>{\n        const Toast = Swal.mixin({\n          toast: true,\n          position: 'top-end',\n          showConfirmButton: false,\n          timer: 3000\n        })\n        \n        Toast.fire({\n          type: 'success',\n          title: 'Todo Deleted Successfully'\n        })\n      })\n        \n      }\n    })\n\n}\n\n\nhandleEdit = (id, value) => {\n  TodoSwal.fire({\n    text: `You Want to Update \"${value}\" ?`,\n    type : 'question',\n    input : 'text',\n    inputAutoTrim : true,\n    inputPlaceholder : 'Enter Updated Value',\n\n    allowEnterKey : true,\n    showCancelButton: true,\n    confirmButtonColor: '#3085d6',\n    cancelButtonColor: '#d33',\n    confirmButtonText: 'Yes, Update it!'\n\n  }).then((result)=>{\n    if(result.value){\n      const body = {\n        todo : result.value\n      }\n\n      axios.put(`/update_todo/${id}`, body).then(()=>{\n        axios.get(`/get_todo`).then((res)=>{\n              this.setState({\n                tododata : res.data\n              })\n          })\n      }).then(()=>{\n        const Toast = Swal.mixin({\n          toast: true,\n          position: 'top-end',\n          showConfirmButton: false,\n          timer: 3000\n        })\n        \n        Toast.fire({\n          type: 'success',\n          title: 'Todo Updated Successfully'\n        })\n      })\n\n\n    }\n  })\n}\n\n  render(){\n    return (\n      <React.Fragment>\n        <h3 className=\"text-center mt-2 h1\">Todo List</h3>\n        <div className=\"row justify-content-center mt-2\">\n        <div className=\"mr-3 w-50\">\n          <input type=\"text\" value={this.state.value} className=\"form-control\" onChange={this.handleChange}/>\n        </div>\n        <div>\n        <button className=\"btn btn-primary\" onClick={this.handleSubmit}>Add Todo</button>\n        </div>\n      </div>\n      <TodoList data={[...this.state.tododata]} handleDel = {this.handleDel} handleEdit = {this.handleEdit} />\n      </React.Fragment>\n\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}